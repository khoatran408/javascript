/* Sum All Numbers in a Range 
We'll pass you an array of two numbers. 
Return the sum of those two numbers plus the sum of all the numbers between them.
The lowest number will not always come first.
*/
function sumAll(arr) {
  let newArr = arr.sort((a,b) => a-b);
  let sum= 0;
  for (let i=newArr[0]; i < newArr[1]+1;i++){
    sum += i;
   }
  return sum;
}

/* Diff Two Arrays
Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. 
In other words, return the symmetric difference of the two arrays.
*/
function diffArray(arr1, arr2) {
  let leftArr = arr1.filter(x => !arr2.includes(x));
  let rightArr = arr2.filter(x => !arr1.includes(x));
  return rightArr.concat(leftArr);
}

/*Seek and Destroy
You will be provided with an initial array (the first argument in the destroyer function), followed by one or more arguments. 
Remove all elements from the initial array that are of the same value as these arguments.
*/
function destroyer(arr) {
  // Remove all the values
  console.clear();
  let newArr = [];
  newArr.push(arr) ;
  for (let i = 1; i < arguments.length; i++){ 
    newArr[i] = newArr[i-1].filter(x => x!== arguments[i]);
  }
  return newArr[arguments.length-1];
}

/* Spinal Tap Case
Convert a string to spinal case. Spinal case is all-lowercase-words-joined-by-dashes.
*/
function spinalCase(str) {
  // "It's such a fine line between stupid, and clever."
  // --David St. Hubbins
  return str.split(/\W|_|(?=[A-Z])/).join('-').toLowerCase();
}

/* Pig Latin
Translate the provided string to pig latin.
Pig Latin takes the first consonant (or consonant cluster) of an English word, moves it to the end of the word and suffixes an "ay".
If a word begins with a vowel you just add "way" to the end.
Input strings are guaranteed to be English words in all lowercase.
*/
function translatePigLatin(str) {
  if (str[0].match(/[aeiou]/)){
    return str+'way';
  } else {
    let secondStr = str.split(/^[bcdfghjklmnprqstvwxyz]+/);
    let firstStr = str.replace(secondStr[1],'');
  return secondStr[1]+firstStr+'ay';
  //return firstStr;
  }
}

/* Search and Replace
Perform a search and replace on the sentence using the arguments provided and return the new sentence.
First argument is the sentence to perform the search and replace on.
Second argument is the word that you will be replacing (before).
Third argument is what you will be replacing the second argument with (after).
Note
Preserve the case of the first character in the original word when you are replacing it. For example if you mean to replace the word "Book" with the word "dog", it should be replaced as "Dog"
*/
function myReplace(str, before, after) {
  let a = str.indexOf(before);
  let b = a + before.length;
  let firstStr = str.slice(0,a);
  let secondStr = str.slice(b);
  if (before[0].toUpperCase() === before[0]){
    after = after[0].toUpperCase()+after.slice(1);
  }
  return firstStr + after + secondStr;
}

/* Sorted Union
Write a function that takes two or more arrays and returns a new array of unique values in the order of the original provided arrays.
In other words, all values present from all arrays should be included in their original order, but with no duplicates in the final array.
The unique numbers should be sorted by their original order, but the final array should not be sorted in numerical order.
*/
function uniteUnique(arr) {
  let unique = [];
  for (let i = 0; i < arguments.length; i++){
    unique = [...unique,...arguments[i]];
  }
  return [...new Set(unique)];
}
